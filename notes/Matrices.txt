MATRICES

A matrix is:
    -Collection of numbers ordered in rows and columns
    -Two-dimensional array of numbers
    -We Denote matrices in uppercase, italic, and bold
    -Each value in a matrix is called an element
    -Basic arithmetic can be performed on matrices
    -Can contain numbers, symbols, or expressions
    -can be any size: NxM
    -Element denoted as aij
    -ex: A = [1 2 3; 4 5 6; 7 8 9]
    -A is a 3x3 matrix

Matrix Types

-Rectangular
    -Number of rows does not equal number of columns
    -ex: A = [1 2 3; 4 5 6]
    -NxM where N = rows, M = columns, N != M

-Square
    -Number of rows equals number of columns
    -ex: A = [1 2 3; 4 5 6; 7 8 9]
    -NxN where N = rows, N = columns

-Symetric
    -A square matrix where Aij = Aji
    -In other words, the elements are mirrored across the diagonal
    -ex: A = [1 2 3; 2 4 5; 3 5 6]
    -Aij = Aji

-Zero
    -All elements are zero
    -Any matrix multiplied by a zero matrix is a zero matrix
    -ex: A = [0 0 0; 0 0 0; 0 0 0]

-Identy
    -A square matrix where Aij = 1 if i = j and Aij = 0 if i != j
    -In other words, the diagonal elements are 1 and all other elements are 0
    -Any matrix multiplied by an identity matrix is the original matrix
    -Denoted with I
    -ex: A = [1 0 0; 0 1 0; 0 0 1]

-Diagonal 
    -A square matrix where Aij = 0 if i != j
    -In other words, all elements not on the diagonal are 0
    -Diagonal elements can be any value, including zero
    -ex: A = [1 0 0; 0 2 0; 0 0 3]

-Triangular
    -A square matrix where all elements above or below the diagonal are zero
    -Upper triangular: Aij = 0 if i > j
    -Lower triangular: Aij = 0 if i < j
    -ex: A = [1 2 3; 0 4 5; 0 0 6]
    -ex: Upper triangular matrix [1 2 3; 0 4 5; 0 0 6]
    -ex: Lower triangular matrix [1 0 0; 4 5 0; 7 8 9]

Matrix Transformation
    -Any linear transformation in a plane or space can be represented by vectors or matrices
    -We can specify any linear transformation in three-dimensional space using a 3x3 matrix
    -With a 3x3 matrix, we can achieve
        -Scaling by a factor in a direction
        -Reflection across the plane
        -Rotation by angle about any axis
        -Projection onto any plane or some composition of transformations

How to multiply two matrices
    -To multiply a matrix by another matrix, we take the dot product of each row of the first matrix with each column of the second matrix
    -The number of columns in the first matrix must equal the number of rows in the second matrix
    -The resulting matrix has the same number of rows as the first matrix and the same number of columns as the second matrix
    -ex: A = [1 2 3; 4 5 6; 7 8 9]
    -ex: B = [1 2 3; 4 5 6; 7 8 9]
    -ex: [1 * 1 + 2 * 4 + 3 * 7, 1 * 2 + 2 * 5 + 3 * 8, 1 * 3 + 2 * 6 + 3 * 9;
          4 * 1 + 5 * 4 + 6 * 7, 4 * 2 + 5 * 5 + 6 * 8, 4 * 3 + 5 * 6 + 6 * 9; 
          7 * 1 + 8 * 4 + 9 * 7, 7 * 2 + 8 * 5 + 9 * 8, 7 * 3 + 8 * 6 + 9 * 9]
    -ex: [30 36 42; 66 81 96; 102 126 150]
    -ex2: A = [1 2 3; 1 2 3]
    -ex2: B = [1 2; 1 2; 1 2]
    -ex2: [1 * 1 + 2 * 1 + 3 * 1, 1 * 2 + 2 * 2 + 3 * 2;
           1 * 1 + 2 * 1 + 3 * 1, 1 * 2 + 2 * 2 + 3 * 2]
    -ex2: [6 12; 6 12]
    
Matrix Addition
    -To add two matrices, we add the corresponding elements of each matrix
    -The matrices must be the same size
    -ex: A = [1 2 3; 4 5 6; 7 8 9]
    -ex: B = [1 2 3; 4 5 6; 7 8 9]
    -ex: C = A + B

Matrix Subtraction
    -To subtract two matrices, we subtract the corresponding elements of each matrix
    -The matrices must be the same size
    -ex: A = [1 2 3; 4 5 6; 7 8 9]
    -ex: B = [1 2 3; 4 5 6; 7 8 9]
    -ex: C = A - B

Matrix transformations 

-Scaling   
    -Multiplying a matrix by a diagonal matrix scales the matrix
    -ex: A = [1 2 3; 4 5 6; 7 8 9]
    -ex: B = [2 0 0; 0 2 0; 0 0 2]
    -ex: C = A * B
    -ex: C = [2 4 6; 8 10 12; 14 16 18]

-Inversion
    -Multiplying a matrix by a diagonal matrix with negative values in the diagonal inverts the matrix
    -ex: A = [1 2 3; 4 5 6; 7 8 9]
    -ex: B = [-1 0 0; 0 -1 0; 0 0 -1]
    -ex: C = A * B
    -ex: C = [-1 -2 -3; -4 -5 -6; -7 -8 -9]

-Rotation
    -Multiplying a matrix by a rotation matrix rotates the matrix
    -[cos(theta) -sin(theta); sin(theta) cos(theta)]
    -ex: A = [1 2 3; 4 5 6; 7 8 9]
    -ex: B = [cos(90) -sin(90); sin(90) cos(90)]
    -ex: C = A * B
    -ex: C = [-2 1 3; -5 4 6; -8 7 9], C is A rotated 90 degrees

-Reflection
    -Multiplying a matrix by a reflection matrix reflects the matrix
    -[cos(2theta) sin(2theta); sin(2theta) -cos(2theta)]
    -ex: A = [1 2 3; 4 5 6; 7 8 9]
    -ex: B = [cos(180) sin(180); sin(180) -cos(180)]
    -ex: C = A * B
    -ex: C = [-1 -2 -3; -4 -5 -6; -7 -8 -9], C is A reflected across the plane

Composition of Linear Transformations
    -Combining any number of different linear transformations to get a new linear transformation
    -Any linear transformation can be represented by a matrix
    -Any two or more composed linear transformations can be represented as matrices

Gausian Elimination
    1. Convert system of equations to augmented matrix/matrix-vector equation
        -ex: 1x + 2y + 1z = 1
             2x + 1y + 1z = 2
             4x + 3y + 3z = 4
             3x + 1y + 2z = 3
        -ex: [1 2 1; [1;
              2 1 1;  2;
              4 3 3;  4;
              3 1 2]  3]
    2. Augment the coefficient matrix with the vector of constants
        -ex: [1 2 1 1; 
              2 1 1 2; 
              4 3 3 4; 
              3 1 2 3]
    2.5 Pivoting
        -We want to ensure we have a nonzero entry in the diagonal position
        -ex: [1 2 1   1;
              0 1 0.2 0;
              0 0 0   0
              0 0 0   0]
    3. Creating a matrix with ones on the diagonals

    4. Mapping the matrix back to equations
        -ex: y = -0.2z
             x + 2y + z = 1
             x = 1 - 2y - z = 1 - 0.6z
    5. Substitution to solve for variables


    Pivoting Step
        -Any two rows may be interchanged
        -Any row may be multiplied by a nonzero constant
        -Any row may be replaced by the sum of itself and a multiple of another row


Inversion 

Concepts
    -The concept of inversion is well known starting from real numbers 
    -A real number a has an inverse b such that a * b = 1
    -We can generalize this to matrices
    -The inverse of a matrix A is denoted as A^-1
    -A * A^-1 = I
    -A matrix B such that A * B = B * A = I is called the inverse of A
    -If matrix A is invertable and we want to solve the system, then for any vector b the system has a unique solution x
        - A*B = B*A = I
        - A*x = B| * A^-1
        - A^-1 * A * x = A^-1 * B
        - x = A^-1 * B
    
Determinant
    -The determinant of a matrix is a scalar value that can be computed from the elements of a square matrix
    -The determinant of a matrix A is denoted as det(A) or |A|
    -In the case det(A) = 0, then A is not invertable
    -The determinant of a 2x2 matrix can be computed as such:
        -A = [a b;
                  c d]
        -det(A) = ad - bc
    -ex: 
        -A = [1 2;
              3 4]
        -det(A) = 1 * 4 - 2 * 3 = -2

A Change of Basis Matrix
    -A matrix that translates vector representations from one basis to another

Transformations 
    -A special class of functions that arise from matrix multiplication

Ordered n-tuple
    -A sequence of n real numbers and a solution of a linear system in n unknowns that can be writen as
        x1 = a1, x2 = a2, ..., xn = an
    -ex: (1, 2, 3) is an ordered 3-tuple
    -The set of all ordered n-tuples is denoted as R^n
    -The elements of R^n are called vectors
    -Standard basis vectors are denoted as e1, e2, ..., en
    -Every vector x can be writen as   
        x = x1e1 + x2e2 + ... + xnen

Matrix transformation from Rn to Rm: T : Rn -> Rm
y = Ax
Matrix transformation maps a vector x in Rn into the vector y in Rm by multiplying x with A
Can be writen as y = Ta(x)

Orthogonal Matrix
    -Denoted with Q
    -Orthonormal vectors make up all the rows and columns of Q

Transpose Matrix
    -A flipped version of the original matrix
    -Switch rows and columns
    -Denoted as A^t
     A * A^t = I

Gram-Schmidt Process
    -Used to transform any basis to orthogonal basis

Suppose B={u1, u2, u3} is a basis for R^3
the set B'={v1, v2, v3} is an orthogonal basis for R^3

u1 = [1 1 1]
u2 = [1 2 2]
u3 = [1 1 0]
A = [1 1 1;
     1 2 2;
     1 1 0] = [u1 u2 u3]

v1 = u1
v2 = u2 - proj(v1, u2)
v3 = u3 - proj(v1, u3) - proj(v2, u3)
